<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>ProGlove Bowl Tracking System</title>

<!-- Firebase SDKs (load from CDN in actual deployment) -->
<script src="https://www.gstatic.com/firebasejs/9.23.0/firebase-app-compat.js"></script>
<script src="https://www.gstatic.com/firebasejs/9.23.0/firebase-database-compat.js"></script>

<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;800&display=swap" rel="stylesheet">

<style>
/* --- COLOR VARIABLES --- */
:root {
    --color-bg-dark: #111827;
    --color-bg-card: #273041;
    --color-bg-light-card: #37475a;
    --color-text-light: #f3f4f6;
    --color-text-secondary: #a0aec0;
    --color-border: #4a5568;

    --color-accent-pink: #ff6e96;
    --color-accent-green: #00e0b3;
    --color-accent-red: #ff5252;
    --color-accent-indigo: #7986cb;
}

/* --- GLOBAL STYLES --- */
body, html {
    margin: 0; padding: 0;
    font-family: 'Inter', sans-serif;
    background-color: var(--color-bg-dark);
    color: var(--color-text-light);
    min-height: 100vh;
}

.container { max-width: 56rem; margin: 0 auto; padding: 1.5rem; }
.app-card { background-color: var(--color-bg-card); border-radius: 0.75rem; padding: 1.5rem; margin-bottom: 1.5rem; border: 1px solid var(--color-border); box-shadow: 0 4px 10px rgba(0,0,0,0.6); }
.header-title { font-size: 1.875rem; font-weight: 800; color: var(--color-accent-pink); text-align: center; }
.header-subtitle { color: var(--color-text-secondary); text-align: center; margin-top: 0.25rem; }
.section-title { font-size: 1.25rem; font-weight: 600; color: var(--color-text-light); border-bottom: 1px solid var(--color-border); padding-bottom: 0.5rem; margin-bottom: 1rem; }
.flex-row-group { display: flex; gap: 1rem; flex-wrap: wrap; margin: 1rem 0; }
.flex-1 { flex: 1 1 0%; }
.hidden { display: none !important; }
.status-box { text-align: center; padding: 0.5rem; border-radius: 0.25rem; background-color: #4b5563; color: var(--color-text-light); font-size: 0.875rem; font-weight: 600; }
.app-select { width: 100%; padding: 0.5rem; border-radius: 0.5rem; background-color: var(--color-bg-light-card); color: var(--color-text-light); border: 1px solid var(--color-border); appearance: none; background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 20 20' fill='%23a0aec0'%3E%3Cpath d='M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z'/%3E%3C/svg%3E"); background-repeat: no-repeat; background-position: right 0.5rem center; background-size: 1.5em; }
.scanner-input { width: 100%; font-size: 1.125rem; color: var(--color-accent-pink); background-color: var(--color-bg-dark); border: 4px solid var(--color-bg-light-card); border-radius: 0.75rem; padding: 0.75rem; text-align: center; box-shadow: inset 0 1px 3px rgba(0,0,0,0.6); transition: border-color 200ms, box-shadow 200ms; }
.scanner-input:focus { border-color: var(--color-accent-pink); outline: none; box-shadow: 0 0 10px rgba(255,110,150,0.5); }
.mode-button { flex:1; padding:0.75rem 1.5rem; border-radius:0.5rem; color:white; font-weight:bold; border:none; cursor:pointer; box-shadow:0 3px 6px rgba(0,0,0,0.4); transition: all 150ms; }
.mode-button:disabled { opacity:0.4; cursor:not-allowed; box-shadow:none; }
.btn-pill { border-radius:9999px; padding:0.9rem 2rem; }
.hover-green:hover { background-color: var(--color-accent-green); }
.hover-red:hover { background-color: var(--color-accent-red); }
.accent-green { background-color: var(--color-accent-green); }
.accent-red { background-color: var(--color-accent-red); }
.metrics-grid { display:grid; grid-template-columns:repeat(4,1fr); gap:1rem; padding-top:0.5rem; border-top:1px solid var(--color-border); margin-top:1rem; }
.metric-item { padding:0.75rem; background-color: var(--color-bg-light-card); border-radius:0.5rem; box-shadow: inset 0 1px 3px rgba(0,0,0,0.4); }
.metric-value { font-size:1.5rem; font-weight:800; }
.metric-label { font-size:0.75rem; color: var(--color-text-secondary); }
.table-container { overflow-x:auto; background-color: var(--color-bg-dark); border-radius:0.5rem; margin-top:1rem; }
.data-table { width:100%; font-size:0.875rem; border-collapse:collapse; }
.table-header-row { background-color: var(--color-bg-light-card); color: var(--color-accent-pink); }
.table-header-cell { padding:0.5rem 0.75rem; font-weight:600; }
.data-table tbody tr:hover { background-color: var(--color-bg-light-card); }
.table-empty-cell { text-align:center; color: var(--color-text-secondary); }
@media (max-width:768px) {
    .metrics-grid { grid-template-columns:1fr 1fr; }
    .flex-row-group { flex-direction: column; }
}
</style>
</head>
<body>

<!-- Message container -->
<div id="messageContainer" class="message-container"></div>

<!-- Main container -->
<div class="container">

<!-- Header -->
<header class="app-card">
<h1 class="header-title">üß§ PROGLOVE BOWL TRACKING</h1>
<p class="header-subtitle">Real-time Prep & Return Synchronization</p>
<div id="systemStatus" class="status-box mt-2">Firebase Status: Unknown</div>
</header>

<!-- Mode Selection -->
<section class="app-card" id="modeSelectionCard">
<h2 class="section-title">1. Select Operation Mode</h2>
<div class="flex-row-group">
<button id="kitchenBtn" onclick="setMode('kitchen')" class="mode-button btn-neutral hover-green">üç≥ KITCHEN PREP</button>
<button id="returnBtn" onclick="setMode('return')" class="mode-button btn-neutral hover-red">üîÑ RETURN SCAN</button>
</div>
<div id="modeDisplay" class="status-box mt-4">Status: Please Select Mode</div>
</section>

<!-- User & Dish Selection -->
<section class="app-card" id="userSelectionCard">
<h2 class="section-title">2. Select User & Dish</h2>
<div class="flex-row-group">
<div class="flex-1">
<label for="userSelect" class="input-label">User Name</label>
<select id="userSelect" class="app-select" disabled>
<option value="" selected disabled>-- Select User --</option>
</select>
</div>
<div class="flex-1 hidden" id="dishSection">
<label for="dishLetterSelect" class="input-label">Dish Letter (A-Z / 1-4)</label>
<select id="dishLetterSelect" class="app-select" disabled>
<option value="" selected disabled>-- Select Dish --</option>
</select>
</div>
</div>
</section>

<!-- Scanner Section -->
<section class="app-card" id="scanningCard">
<h2 class="section-title">3. Scanner Input</h2>
<div class="flex-row-group">
<button id="startBtn" onclick="startScanning()" class="mode-button btn-pill accent-green" disabled>‚ñ∂ START SCANNER</button>
<button id="stopBtn" onclick="stopScanning()" class="mode-button btn-pill accent-red" disabled>‚èπ STOP SCANNER</button>
</div>
<input type="text" id="scanInput" placeholder="Select User and Press START..." class="scanner-input" disabled autocomplete="off">

<!-- Metrics -->
<div class="metrics-grid">
<div class="metric-item">
<p class="metric-label">User Scans (<span id="myDishLetterLabel">---</span>)</p>
<p id="myScansCount" class="metric-value text-accent-green">0</p>
</div>
<div class="metric-item">
<p class="metric-label">Prepared Today</p>
<p id="preparedTodayCount" class="metric-value text-accent-pink">0</p>
</div>
<div class="metric-item">
<p class="metric-label">Active (Out)</p>
<p id="activeCount" class="metric-value text-accent-red">0</p>
</div>
<div class="metric-item">
<p class="metric-label">Returned Today</p>
<p id="exportReturnCount" class="metric-value text-accent-indigo">0</p>
</div>
</div>
</section>

<!-- Live Prep Report Table -->
<section class="app-card">
<h2 class="section-title">Live Prep Report (10 PM Cycle)</h2>
<div class="table-container">
<table class="data-table">
<thead>
<tr class="table-header-row">
<th class="table-header-cell">Dish</th>
<th class="table-header-cell">User</th>
<th class="table-header-cell">Count</th>
</tr>
</thead>
<tbody id="livePrepReportBody">
<tr><td colspan="3" class="table-empty-cell">No kitchen scans recorded during this cycle.</td></tr>
</tbody>
</table>
</div>
</section>

<!-- Data Management & Export -->
<section class="app-card">
<h2 class="section-title">Data Management & Export</h2>
<p id="lastSyncInfo" class="status-box">Awaiting sync...</p>
<div class="flex-row-group">
<button onclick="exportActiveBowls()" class="mode-button bg-blue-600 hover-blue">üì• Export Active Bowls</button>
<button onclick="exportReturnData()" class="mode-button bg-purple-600 hover-purple">üì• Export Returns</button>
<button onclick="exportAllData()" class="mode-button bg-indigo-600 hover-indigo">üìä Export ALL Data</button>
</div>
<h3 class="input-label">JSON Import (Customer Data Patch)</h3>
<textarea id="jsonData" class="app-textarea" placeholder='Paste JSON here...'></textarea>
<div class="flex-row-group">
<button onclick="processJSONData(document.getElementById('jsonData').value)" class="mode-button bg-yellow-600 hover-yellow">üîÑ Patch Customer Data</button>
<button onclick="resetTodaysPreparedBowls()" class="mode-button bg-red-800 hover-red-dark">üóëÔ∏è Reset Prepared/Scans</button>
</div>
</section>

</div>

<!-- Scripts -->
<script src="Bol.js?v=2025102006"></script>
<script>
// Firebase connection status
function updateFirebaseStatus(connected) {
    const statusEl = document.getElementById('systemStatus');
    if (!statusEl) return;
    if (connected) {
        statusEl.textContent = '‚úÖ Firebase Connected';
        statusEl.style.backgroundColor = 'var(--color-accent-green)';
    } else {
        statusEl.textContent = '‚ö†Ô∏è Firebase Disconnected';
        statusEl.style.backgroundColor = 'var(--color-accent-red)';
    }
}

function monitorFirebaseConnection() {
    if (!window.appData || !window.appData.db) {
        updateFirebaseStatus(false);
        return;
    }
    const connectedRef = window.appData.db.ref(".info/connected");
    connectedRef.on("value", snap => updateFirebaseStatus(snap.val() === true));
}

window.addEventListener('load', () => { setTimeout(monitorFirebaseConnection, 1000); });
</script>
</body>
</html>